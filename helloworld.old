#include <iostream>
#include <TApplication.h>
#include <TRandom1.h>
#include <TCanvas.h>
#include <TH1D.h>
#include <TGraph.h>
#include <TLine.h>

extern "C" {
#include "../libgem/libgem.h"
}

int main(int argc, char** argv)
{
    TApplication theApp("App", &argc, argv);

    struct gem_ws* emws;

    // try a simple geometry with only 2 points
    struct dataset* ds = new_dataset_zero(0, 2);
    struct point* points[2];

    double point1[2] = {0.2, 0.8};
    double point2[2] = {0.23, 0.99};
    
    points[0] = new_valued_point(2, point1);
    points[1] = new_valued_point(2, point2);
    
    add_point_dataset(ds, points[0]);
    add_point_dataset(ds, points[1]);

    print_dataset(ds);
    
    double convcrit = 0.00001;
    double scalecrit = 0.0001;

    TGraph* g = new TGraph();
    g -> SetPoint(0, point1[0], point1[1]);
    g -> SetPoint(1, point2[0], point2[1]);

    TCanvas* canv = new TCanvas("canv", "title", 800, 600);
    canv -> cd();
    g -> Draw("A*");
    
    // use multifit directly
    emws = multifit(ds, convcrit, scalecrit, LINE, 0, NULL);

    // try to extract the parameters of the fitted line
    for(int i = 0; i < emws -> nb_objects; i++)
    {
	struct line* outfit = ((struct gline*)(emws -> fit_objects[i] -> container)) -> line;

	double x_ref = outfit -> ref -> coords[0];
	double y_ref = outfit -> ref -> coords[1];
	
	double x_vec = outfit -> dir_vect -> coords[0];
	double y_vec = outfit -> dir_vect -> coords[1];
	
	TLine* line = new TLine(x_ref - x_vec, y_ref - y_vec, x_ref + x_vec, y_ref + y_vec);
	line -> Draw();
    }

    canv -> SaveAs("out.pdf");
	
    theApp.Run();

    free_dataset(ds);
    free_gem(emws);
    
    return 0;
}
